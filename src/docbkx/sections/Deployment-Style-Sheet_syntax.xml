<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section[
<!ENTITY % myents SYSTEM "../shared.ent" >
%myents;
]>
<section xml:id="Deployment-Style-Sheet_syntax" xmlns="http://docbook.org/ns/docbook" version="5.0"
  xml:lang="en">
  <title>Syntax</title>
  <section>
    <title><filename>.ext</filename> file syntax</title>
    <section>
      <title>Usage of wildcards</title>
      <para>The <filename>.ext</filename> file has a similar syntax to the ADL files, with the
        support of wildcards:</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>'<code>*</code>' for any name (component, instance)</para>
          </listitem>
          <listitem>
            <para>'<code>**</code>' for any package name</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>The annotations are placed where they would be placed in an ADL file, see <xref linkend="DSS-examples-ext-files"/> below.</para>
    </section>
    <section xml:id="DSS-limitations">
      <title>Applying the annotations</title>
      <para>The usage of several <filename>.ext</filename> files and/or the use of
          <filename>.ext</filename> files with other annotations within the ADL files lead to the
        handling of multiple annotations for a single entity. The Mind compiler handle this
        situation as follows:</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>all distinct annotations are appended (ex: <code>@Singleton</code>,
                <code>@Flatten</code>, <code>@CFlags</code> ...)</para>
          </listitem>
          <listitem>
            <para>in case of several identical annotations with different parameters values (ex:
                <code>@UseIDL({"myFirstIDL"})</code> and <code>@UseIDL({"mySecondIDL"})</code>),
              only one of these annotations is kept.</para>
            <para>No merge of the parameters values is performed, currently, there is no log to
              inform the user of this conflict.</para>
          </listitem>
        </itemizedlist>
      </para>
    </section>
  </section>
  <section xml:id="DSS-examples-ext-files">
    <title>Examples of <filename>.ext</filename> files</title>
    <section>
      <title>Using the optimization back-end</title>
      <para>
      <example>
        <title>Singletonize all primitives</title>
        <programlisting>@Singleton
primitive **.* {
}</programlisting>
      </example>
    </para>
      <para> </para>
        <para>
          <example>
            <title>In all composites named "<code>stack</code>", whatever the package, singletonize
            them and put the bindings as <code>@Static</code></title>
            <programlisting>@Singleton
@StaticBindings(true)
composite **.stack {
}</programlisting>
          </example>
        </para>
    </section>
    <section>
      <title>Debugging and measuring code coverage</title>
    <para>
      <example>
        <title>Enable use of extra debugging information for source code of all primitives
            (<command>gcc</command> compiler)</title>
        <programlisting>primitive **.* {
  @CFlags("-g")
  source*;
}</programlisting>
      </example>
    </para>
    <para>
      <note>
        <para>Using this extension enables the debugging information only for the user source code
          (source files in primitves), whereas enabling the debugging information as a compilation
          flag to the <command>mindc</command> command line using <code>--c-flags="-g"</code> will
          enable debugging information also for the code generated by the Mind compiler. </para>
      </note>
    </para>
    <para>
      <example>
        <title>Enable use of <command>gcov</command> coverage testing tool</title>
        <programlisting>primitive **.* {
  @CFlags("-O0 -fprofile-arcs -ftest-coverage")
  source*;
}</programlisting>
      </example>
    </para>
    <para>
      <note>
        <para>As stated in the <xref linkend="DSS-limitations"/>, both extention files cannot be
          used simultaneously to enable extra debuggin information ("<code>-g</code>") and coverage
          testing ("<code>-O0 -fprofile-arcs -ftest-coverage</code>") since they both use the
            <code>@CFlags</code> annotation, in this case a specific extension file should be used
          with all flags ("<code>-g -O0 -fprofile-arcs -ftest-coverage</code>").</para>
      </note>
    </para>
    </section>
  </section>
</section>
